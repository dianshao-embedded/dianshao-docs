<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>欢迎使用颠勺 on Dianshao Docs</title><link>https://dianshao-embedded.github.io/dianshao-docs/</link><description>Recent content in 欢迎使用颠勺 on Dianshao Docs</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://dianshao-embedded.github.io/dianshao-docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Yocto 介绍</title><link>https://dianshao-embedded.github.io/dianshao-docs/roadmap/yocto/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dianshao-embedded.github.io/dianshao-docs/roadmap/yocto/</guid><description/></item><item><title>Yocto 介绍</title><link>https://dianshao-embedded.github.io/dianshao-docs/yocto/yocto/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dianshao-embedded.github.io/dianshao-docs/yocto/yocto/</guid><description/></item><item><title>创建项目</title><link>https://dianshao-embedded.github.io/dianshao-docs/lora-gateway/project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dianshao-embedded.github.io/dianshao-docs/lora-gateway/project/</guid><description>1. 创建项目 2. 增加元数据层 3. 上传至远端仓库 1. 创建项目 项目名为 lora-gateway-imx6ull yocto 版本选择 hardknott 点击创建，等待项目初始化完成，如果网络不好，时间会较长 2. 增加元数据层 计划使用 imx6ull 芯片，因此需要额外添加 freescale 和 freescale-distro 两个元数据层
meta-freescale: 名称 meta-freescale, url https://github.com/Freescale/meta-freescale.git meta-freescale-distro: 名称 meta-freescale-distro, url https://github.com/Freescale/meta-freescale-distro.git 等待元数据层添加完成
3. 上传至远端仓库 本项目将作为例程上传至 dianshao-embedded/lora-gateway-imx6ull 仓库中</description></item><item><title>概述</title><link>https://dianshao-embedded.github.io/dianshao-docs/usermanual/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dianshao-embedded.github.io/dianshao-docs/usermanual/overview/</guid><description>1. 项目背景 2. 项目范围 3. 开发流程 1. 项目背景 颠勺平台是一个嵌入式 Yocto Linux 终端项目构建管理工具，具有以下特征
提供 BBFILE 自动生成功能降低开发 Yocto 项目的难度，对初学者友好 提供标准化的嵌入式 Linux 项目开发管理流程，提高嵌入式终端项目的可维护性 提供 Yocto 项目模板导入导出功能，用标准化的项目模板加速开发 项目运行于 Docker 容器之上，可跨平台部署（Linux、Windows），部署简便 开发该项目的初衷是为了帮助自己更方便的开发 Yocto 项目，同时方便嵌入式开发团队协同开发。
2. 项目范围 由于 Yocto-Linux 开发过程复杂，不容易归纳。因此颠勺项目只帮助用户构建文件系统，包括文件系统构建以及其中包含的所有软件，而不涉及内核、驱动及u-boot
应用软件包自动构建（非内核、驱动、u-boot 软件） 文件系统自动构建 镜像及升级包自动构建 3. 开发流程 使用颠勺开发 Yocto 项目主要分为四步，详情参考后续章节
创建 Yocto 项目，并根据需求增加相应的元数据层，默认创建的 Yocto 项目中包括 bitbake, meta-yocto, meta-openembedded, meta-rauc</description></item><item><title>简介</title><link>https://dianshao-embedded.github.io/dianshao-docs/quickstart/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dianshao-embedded.github.io/dianshao-docs/quickstart/introduction/</guid><description>1. 项目特征 2. 依赖项目 3. 系统架构 1. 项目特征 一个嵌入式 Yocto Linux 终端项目构建管理工具
提供 BBFILE 自动生成功能降低开发 Yocto 项目的难度，对初学者友好
提供标准化的嵌入式 Linux 项目开发管理流程，提高嵌入式终端项目的可维护性
提供 Yocto 项目模板导入导出功能，用标准化的项目模板加速开发
项目运行于 Docker 容器之上，可跨平台部署（Linux、Windows），部署简便
2. 依赖项目 颠勺主要是基于 Django 开发， 它通过由 Celery + Redis 支持的异步队列发送 bitbake 命令进行编译等操作，另外它使用 Postgresql 作为数据库
为了快速可靠的安装部署，颠勺和相关依赖均运行于 Docker 容器之中</description></item><item><title>底层开发</title><link>https://dianshao-embedded.github.io/dianshao-docs/lora-gateway/machine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dianshao-embedded.github.io/dianshao-docs/lora-gateway/machine/</guid><description>1. 硬件组成 2. u-boot 2.1 设备树开发 2.2 board 开发 2.3 config 2.4 bbfile 3. kernel 3.1 设备树 3.2 config 文件 3.3 Makefile Patch 3.4 linux bbappend 4. machine conf 5. distro conf 1. 硬件组成 对于一个基础的 LoRa 网关，主要有以下外设
LoRa 模块: semtech sx1301 基带芯片 4G 模块: 移远 EC20 PHY: KSZ8081 使用 SD 卡作为存储 2.</description></item><item><title>快速开始</title><link>https://dianshao-embedded.github.io/dianshao-docs/quickstart/quickstart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dianshao-embedded.github.io/dianshao-docs/quickstart/quickstart/</guid><description>1. 说明 2. 安装 2.1 资源要求 2.2 安装准备 2.3 安装 3. 创建项目 4. 增加元数据层 5. 测试 Bitbake 命令 6. 增加软件包 7. 制作并编译镜像文件 8. 项目上传 1. 说明 本文将从零开始，让您快速的部署颠勺并构建第一个 Yocto 项目。
本文主要目的是让您快速体验颠勺，希望在短时间内，可以说服您这个项目对嵌入式 Linux 项目开发是非常有用，可以提供生产力的。
总的来说，颠勺是 Bitbake 的拓展，目的是帮助开发者更方便的开发 Yocto 项目
如果你对 Yocto 很熟悉，那你会很快掌握颠勺。如果你是一个初学者，颠勺将帮助你快速理解和学会开发 Yocto 项目。但是建议你最好有一定的嵌入式 Linux 开发经验。
详细的使用说明请参考颠勺用户手册，里面会更加详细的介绍颠勺所有的功能以及您最好掌握的相关知识说明。
2. 安装 2.1 资源要求 由于需要编译 Yocto 项目，所以对资源要求较高，具体要求如下</description></item><item><title>项目</title><link>https://dianshao-embedded.github.io/dianshao-docs/usermanual/project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dianshao-embedded.github.io/dianshao-docs/usermanual/project/</guid><description>1. 创建项目 2. 增加元数据层 3. 上传项目 4. 本地项目路径 1. 创建项目 在颠勺中创建一个新项目十分简单，只需输入项目名称和你需要使用的 Yocto 版本号
目前颠勺支持从 zeus 到 hardknott 四个 Yocto 版本
颠勺默认创建的 Yocto 项目中使用 dianshao distro, 使用 systemd 作为启动方式
颠勺默认创建的 Yocto 项目中包含如下元数据层
注意: 由于国内网络环境问题，元数据层仓库拉取时间可能会很长，请耐心等待
2. 增加元数据层 默认创建的项目中只包含基本的元数据层，用户可以根据项目需要在项目创建完成后手动增加元数据层
点击项目详情里的 ADD META LAYER 即可手动增加</description></item><item><title>底层开发</title><link>https://dianshao-embedded.github.io/dianshao-docs/usermanual/machine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dianshao-embedded.github.io/dianshao-docs/usermanual/machine/</guid><description>1. 说明 2. u-boot 3. kernel 4. 额外驱动 5. rauc 适配开发 6. machine conf 7. distro conf 8. 总结 1. 说明 正如快速开始章节所说，由于嵌入式 Linux 项目会使用各种各样的芯片和外设，无法归纳和总结成一套固定的程序。因此颠勺目前不提供如下 Yocto 开发的支持：
u-boot 包开发 内核包开发 驱动包开发 rauc 适配开发 machine 配置文件 distro 配置文件 对于开发嵌入式 Linux 项目来说，所有的底层工作 90% 以上是移植。通常来说，开发人员的主要工作是根据需求修改 u-boot 和内核 config 文件并编译，增加额外驱动，修改设备树。 Yocto 提供了丰富的底层软件包，用户一般只需要根据需求做少量的改动即可完成，降低移植难度，后续例程中会简单介绍颠勺项目如何进行底层移植。
2. u-boot 对于常用芯片，可以使用 openembedded-core/meta/recipes-bsp/u-boot 包，该包使用的是 u-boot 官方仓库。也可以使用芯片厂商提供的元数据层中的 u-boot 包，例如 imx 系列芯片，可以使用 u-boot-imx</description></item><item><title>软件包</title><link>https://dianshao-embedded.github.io/dianshao-docs/lora-gateway/package/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dianshao-embedded.github.io/dianshao-docs/lora-gateway/package/</guid><description>1. 说明 2. EC20 2.1 新建及配置 2.2 添加文件 2.3 安装文件到文件系统 2.4 生成 bbfile 2.5 测试 3. lora-gateway 3.1 创建并配置 3.2 任务 3.3 添加额外定义 3.4 生成 bbfile 并编译 4. packet-forwarder 4.1 创建并配置 4.2 添加本地文件 4.3 增加任务 4.4 生成 bbfile 并编译 5. chirpstack-gateway-bridge 5.1 创建配置项目 5.2 增加本地文件 5.3 增加任务 5.4 生成 bbfile 并编译 1.</description></item><item><title>软件包</title><link>https://dianshao-embedded.github.io/dianshao-docs/usermanual/package/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dianshao-embedded.github.io/dianshao-docs/usermanual/package/</guid><description>1. 说明 2. 创建 3. 参数设置 4. 增加本地文件 5. 增加任务 6. 增加额外宏定义 7. 生成 bbfile 1. 说明 颠勺提供 MyPakcage 功能帮助开发者快速的创建 yocto 包，包括以下功能
自动生成 yocto bb/bbappend file 生成并添加包所需额外文件，如配置文件、systemd service 文件等 生成并添加软件项目补丁 目前支持 C/C++ golang 两种编程语言软件项目 yocto 包的制作
2. 创建 点击 New Package 创建包，填写包必要信息
Version: 请保持和软件版本相同，用于拉取正确版本软件 Type: 是 yocto bb 包还是 bbappend 包 Language: 编程语言是 C/C++ 还是 Golang Download Method: 源码仓库下载方式选择 Initial Method: 软件启动方式选择，目前仅支持 Systemd 3.</description></item><item><title>镜像</title><link>https://dianshao-embedded.github.io/dianshao-docs/lora-gateway/image/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dianshao-embedded.github.io/dianshao-docs/lora-gateway/image/</guid><description>1. 说明 2. 创建镜像 3. 镜像制作 4. 文件系统制作 5. 与上菜配合使用 6. 生成镜像、升级包 bbfile 7. 编译镜像 8. 上传升级包 1. 说明 lora gateway 镜像除了基础文件系统之外，主要包括 ec20, packet-forwarder, chirpstack-gateway-bridge 三个软件包
2. 创建镜像 我们基于 poky-base 制作文件系统，并选择 sd 作为存储方式
3. 镜像制作 我们使用 freescale 官方提供的 wks 文件，因此不需要自己创建 wks 文件
4. 文件系统制作 文件系统需要添加 ec20, packet-forwarder, chirpstack-gateway-bridge 三个文件包，同时增加一个 sudo 软件包，增加 admin 用户</description></item><item><title>镜像</title><link>https://dianshao-embedded.github.io/dianshao-docs/usermanual/image/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dianshao-embedded.github.io/dianshao-docs/usermanual/image/</guid><description>1. 说明 2. 创建 3. 镜像制作 4. 文件系统制作 5. 与上菜配合使用 6. 增加额外宏定义 7. 生成镜像、升级包 bbfile 8. 编译镜像 9. 编译并上传升级包 1. 说明 颠勺提供 MyImage 功能帮助开发者快速制作文件系统、镜像以及升级包
2. 创建 点击 New Image 创建新的镜像，填写必要信息
Base: 由于文件系统包含太多文件，因此 yocto 提供了两种基础文件系统供我们在其基础上添加自己的文件。其中 minimal 只包含启动所必须的文件，base 则包含了芯片所有外设的固件库 Flash: 选择终端使用的 Flash 类型，目前提供 spi-nor, rawnand, sd 可选 3. 镜像制作 目前 Yocto 只支持 sd 卡的镜像制作，用户通过点击 ADD WKS FILE 创建 Wic File 确定分区，yocto 会自动构建wic 镜像 主流芯片及开发板厂商通常会在其元数据层中提供默认 wic file，因此也可以不填 4.</description></item></channel></rss>